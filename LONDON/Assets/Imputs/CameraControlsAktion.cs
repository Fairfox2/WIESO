//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Imputs/CameraControlsAktion.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControlsAktion : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControlsAktion()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControlsAktion"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""e3c4d8e8-bb17-401a-8cfb-424ef67091c3"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""Value"",
                    ""id"": ""6ec1596a-2743-4878-bf44-f8c84b5a255c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""5d96fabe-0cca-4e9f-a30d-256db3f3b5ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""0b64a3a1-de2a-4239-9d35-6d7933125cc3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position_mous"",
                    ""type"": ""Value"",
                    ""id"": ""35e53213-4ac5-47d9-bf60-e4806ddbb6fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ae033d32-61fb-47d1-8976-8bd3ba13712e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21c7bab0-3230-4c11-aa1d-30a5df0e0c61"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5850a47d-c090-4a21-b5d3-28e3c3119932"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7b24b88d-31fb-4bd6-882f-be3200f6f115"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d117a619-a3c9-409b-92f5-2a755290b651"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4e4d17b5-6eb8-4da4-89cf-2db7f228eb96"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d92b126b-e6de-47da-b8df-e5afe3ad1632"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""065f8a4e-eccd-4da0-8fd3-61e7fbfa2845"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position_mous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""building"",
            ""id"": ""860ed382-09a9-4b62-ba96-88fc845c8c6b"",
            ""actions"": [
                {
                    ""name"": ""bauen"",
                    ""type"": ""Button"",
                    ""id"": ""6a4fe055-fac4-41f3-9767-31e57cbc92e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d32ddda5-4a5d-41de-b2ba-7e77d89f8c12"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""bauen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Movment = m_Camera.FindAction("Movment", throwIfNotFound: true);
        m_Camera_RotateCamera = m_Camera.FindAction("RotateCamera", throwIfNotFound: true);
        m_Camera_ZoomCamera = m_Camera.FindAction("ZoomCamera", throwIfNotFound: true);
        m_Camera_Position_mous = m_Camera.FindAction("Position_mous", throwIfNotFound: true);
        // building
        m_building = asset.FindActionMap("building", throwIfNotFound: true);
        m_building_bauen = m_building.FindAction("bauen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Movment;
    private readonly InputAction m_Camera_RotateCamera;
    private readonly InputAction m_Camera_ZoomCamera;
    private readonly InputAction m_Camera_Position_mous;
    public struct CameraActions
    {
        private @CameraControlsAktion m_Wrapper;
        public CameraActions(@CameraControlsAktion wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_Camera_Movment;
        public InputAction @RotateCamera => m_Wrapper.m_Camera_RotateCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_Camera_ZoomCamera;
        public InputAction @Position_mous => m_Wrapper.m_Camera_Position_mous;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Movment.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMovment;
                @Movment.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMovment;
                @Movment.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMovment;
                @RotateCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @ZoomCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomCamera;
                @Position_mous.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnPosition_mous;
                @Position_mous.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnPosition_mous;
                @Position_mous.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnPosition_mous;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movment.started += instance.OnMovment;
                @Movment.performed += instance.OnMovment;
                @Movment.canceled += instance.OnMovment;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
                @Position_mous.started += instance.OnPosition_mous;
                @Position_mous.performed += instance.OnPosition_mous;
                @Position_mous.canceled += instance.OnPosition_mous;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // building
    private readonly InputActionMap m_building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_building_bauen;
    public struct BuildingActions
    {
        private @CameraControlsAktion m_Wrapper;
        public BuildingActions(@CameraControlsAktion wrapper) { m_Wrapper = wrapper; }
        public InputAction @bauen => m_Wrapper.m_building_bauen;
        public InputActionMap Get() { return m_Wrapper.m_building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @bauen.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnBauen;
                @bauen.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnBauen;
                @bauen.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnBauen;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @bauen.started += instance.OnBauen;
                @bauen.performed += instance.OnBauen;
                @bauen.canceled += instance.OnBauen;
            }
        }
    }
    public BuildingActions @building => new BuildingActions(this);
    public interface ICameraActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
        void OnPosition_mous(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnBauen(InputAction.CallbackContext context);
    }
}
